# -*- coding: utf-8 -*-
"""Untitled31.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1D2WjkL1aePB-0ZK46KTElsSJCPHK5nqJ
"""

#!pip install supermemo2

from datetime import *
import datetime
import json
from pathlib import Path
import random
import math
import itertools
from tqdm import tqdm
from supermemo2 import SMTwo
import pandas as pd
import numpy as np

kanji_num_radicals = json.loads(Path('C:\\Users\\User\\Downloads\\FromBharathAndCo\\FromBharathAndCo\\kanji_num_radicals.txt',encoding = 'utf8').read_text())
kanji_num_strokes = json.loads(Path('C:\\Users\\User\\Downloads\\FromBharathAndCo\\FromBharathAndCo\\kanji_num_strokes.txt',encoding = 'utf8').read_text())
df = pd.read_csv('C:\\Users\\User\\Downloads\\FromBharathAndCo\\out_kanji_rtkId.csv',header = None,sep = '\t')
kanji_with_rtk = list(df[0])
kanji_rtk = dict(zip(list(df[0]),list(df[1]))) 
common_kanjis = [i for i in kanji_rtk.keys() if i in kanji_num_radicals.keys()]
#kanji_list_per_user = {i:common_kanjis for i in range(5)}
user_database = []

kanji_score1 = []
for i in kanji_num_strokes.keys():
  score1 = kanji_num_strokes[i]*kanji_num_radicals[i]
  rtk_score = kanji_rtk[i]
  kanji_score1.append([score1,rtk_score])
kanji_score = [round((i[0]/(max(kanji_score1[0])/3)+(i[1]/(max(kanji_score1[1])/2))),2) for i in kanji_score1]
kanji_score_dict = dict(zip(kanji_num_strokes.keys(),kanji_score))

users = list(range(1,1001))
v = []
for user in range(365):
  [no_plays] = random.sample(list(range(300,800)),1)
  #no_plays = 2
  v.append(no_plays)
user_playing = []
for i in range(365):
  user_playing.append(random.sample(users,v[i]))
for i in user_playing:
  l = []
  for j in i :
    c = [3,4,5]
    # if j < 6 and j > 3:
    #   c = [3,4]
    # elif j >7:
    #   c = [1,2,3]
    [rep] = random.sample(c,1)
    l += [j]*(rep)
  i.extend(l)

kanji_list_per_user = {i:common_kanjis for i in users}

kanji_play_count = {i:{i:0 for i in users} for i in common_kanjis}

user_kanji_last_date = {i:{i:0 for i in common_kanjis} for i in users}

user_kanji_review_data = {i:{i:0 for i in common_kanjis} for i in users}

def to_do_kanji(user_id,user_database,kanji_list_per_user,user_kanji_last_date,today,kanji_play_count):
  user_kanji_list = [i for i in user_database if i[0] == user_id]
  pending_kanji = [i[1] for i in user_kanji_list if i[2] <= today]
  #pending_kanji = [i for i in pending_kanji1 if user_kanji_last_date[user_id][i] == today]
  #print(pending_kanji)
  if len(pending_kanji) == 0 and len(kanji_list_per_user[user_id]) != 0:
    pending_kanji.append(kanji_list_per_user[user_id][0])
    updated_kanji = [i for i in kanji_list_per_user[user_id] if i != pending_kanji[0]]
    kanji_list_per_user[user_id] = updated_kanji
  #for i in user_database:
  #  if i[1] == pending_kanji[0] and i[0] == user_id:
  #    user_database.remove(i)
  #user_database = [i for i in user_database if (i[1] != pending_kanji[0] and i[0] != user_id)]
  #kanji_play_count[pending_kanji[0]][user_id] = kanji_play_count[pending_kanji[0]][user_id] + 1
  if len(pending_kanji) != 0:
    next_played_kanji = pending_kanji[0]
    kanji_play_count[pending_kanji[0]][user_id] = kanji_play_count[pending_kanji[0]][user_id] + 1
    #  user_database = [i for i in user_database if (i[1] != pending_kanji[0] and i[0] != user_id)]
    for i in user_database:
      if i[0] == user_id and i[1] == pending_kanji[0]:
        user_database.remove(i)
#print(user_database)
  else:
    next_played_kanji = 0
  return next_played_kanji,user_database,kanji_list_per_user,kanji_play_count

def attempt_generator(user_id):
  random.seed(4876)
  scores = round(np.random.chisquare(7, 1)[0])
  # scores.extend(sum(list(np.random.chisquare(5, 10)))/10 for i in range(2))
  # scores.extend(sum(list(np.random.chisquare(5, 10)))/10 for i in range(3))
  return scores

# def attempt_generator(user_id):
#   random.seed(4876)
#   mu, sigma = 1.6, .3  
#   scores = [sum(list(np.random.chisquare(5, 10)))/10 for i in range(5)]
#   mu, sigma = 1.0, .2  

#   scores.extend(sum(list(np.random.lognormal(mu, sigma, 10)))/10 for i in range(2))
#   mu, sigma = 2, .2  

#   scores.extend(sum(list(np.random.lognormal(mu, sigma, 10)))/10 for i in range(3))
#   return round(scores[users.index(user_id - 1)])

def user_scores(user_id):
  #next_kanji = to_do_kanji(user_id,user_database,kanji_list)[0]
  n_attempts = attempt_generator(user_id)
  if n_attempts > 7:
    score = 0
  elif n_attempts == 7:
    score = 1
  elif n_attempts in [5,6]:
    score = 2
  elif n_attempts == 4:
    score = 3
  elif n_attempts == 3:
    score = 4
  else:
    score = 5
  return score

def sm2(user_id,next_kanji_user,scores,kanji_play_count,user_database,user_kanji_last_date,user_kanji_review_data,today,length):
  #data = to_do_kanji(i,user_database,kanji_list_per_user)
  #next_kanji_user = data[0]
  #updated_database = data[1]
  #updated_kanji_left = data[2]
  #data1 = user_scores(next_kanji_user)
  #user_attempts = data1[0]
  #user_score = data1[1]
  #if kanji_play_count[next_kanji_user][user_id] == 0:
  #if user_kanji_review_data[user_id][next_kanji_user] == 0:
  if next_kanji_user !=0:
    if length == 1 and next_kanji_user != 0:
      review = SMTwo.first_review(scores,today1)
      #kanji_play_count[next_kanji_user][user_id] = kanji_play_count[next_kanji_user][user_id] + 1
      user_kanji_last_date[user_id][next_kanji_user] = review.review_date
      user_kanji_review_data[user_id][next_kanji_user] = [review.easiness, review.interval, review.repetitions]
    elif length > 1 and next_kanji_user != 0:
      review = SMTwo(user_kanji_review_data[user_id][next_kanji_user][0], user_kanji_review_data[user_id][next_kanji_user][1], user_kanji_review_data[user_id][next_kanji_user][2]).review(scores,today)
      #kanji_play_count[next_kanji_user][user_id] = kanji_play_count[next_kanji_user][user_id] + 1
      user_kanji_last_date[user_id][next_kanji_user] = today
      user_kanji_review_data[user_id][next_kanji_user] = [review.easiness, review.interval, review.repetitions]
    #print([user_id,next_kanji_user,review.review_date])
    user_database.append([user_id,next_kanji_user,review.review_date])
    #print(user_database)
  return user_database,user_kanji_last_date,user_kanji_review_data

user_score_count = {i:{i:[] for i in common_kanjis} for i in users}

today1 = date.today()
for i in tqdm(user_playing):
  for j in i:
    data = to_do_kanji(j,user_database,kanji_list_per_user,user_kanji_last_date,today1,kanji_play_count)
    kanji_play_count = data[3]
    kanji_list_per_user = data[2]
    next_kanji = data[0]
    n_attempts = attempt_generator(j)
    data1 = user_scores(j)
    if next_kanji != 0:
      user_score_count[j][next_kanji].append(data1)
      length = len(user_score_count[j][next_kanji])
      last_entry = user_score_count[j][next_kanji][length - 1]
      last_before = user_score_count[j][next_kanji][length - 2]
    else:
      last_entry = 5
      last_before = 5
    if length == 1:
      data2 = sm2(j,next_kanji,data1,kanji_play_count,data[1],user_kanji_last_date,user_kanji_review_data,today1,length)
      user_database = data2[0]
      user_kanji_last_date = data2[1]
      user_kanji_review_data = data2[2]
    elif length > 1 and (last_entry < 1 or last_before < 1):
      data2 = sm2(j,next_kanji,data1,kanji_play_count,data[1],user_kanji_last_date,user_kanji_review_data,today1,length)
      user_database = data2[0]
      user_kanji_last_date = data2[1]
      user_kanji_review_data = data2[2]
  today1 = today1 + datetime.timedelta(days = 1)

kanji_in_database = {}
for i in users:
  kanji_in_database[i] = [j[1] for j in user_database if j[0] == i]

left_kanji = []
for i in users:
  left_kanji.append(2132-len(kanji_list_per_user[i]) - len(kanji_in_database[i]))

import statistics
print(statistics.mean(left_kanji),statistics.median_high(left_kanji),statistics.stdev(left_kanji),max(left_kanji)-min(left_kanji),min(left_kanji),max(left_kanji))

"""if a playyer plays 3 to 5 games for 1 year whenever he is playing he learns an avg 972 kanjis.(7 attemps streak of 2)
(22.952, 23, 4.7592380005990815, 32, 10, 42) for 2 consecutive less than 4 attempts
(171.574, 172, 13.257234940902205, 84, 134, 218) for 2 consecutive less than 7 attempts
(232.409, 232, 15.048926512850981, 84, 190, 274) for 2 consecutive atleast 7 attempts
"""

